// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: muvtuber/chatbot/chatgpt_chatbot/v1/chatgpt_chatbot.proto

package chatgpt_chatbotv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// access_token from https://chat.openai.com/api/auth/session for ChatGPT authentication.
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// initial_prompt is the prompt to start a conversation.
	// e.g. "Hi, I'm ChatGPT. How are you?"
	//
	// GitHub Copilot 想对 ChatGPT 说：「Hi, I'm ChatGPT.」
	// 哈哈哈，每一个 GPT-3 都有一个 ChatGPT 梦。
	InitialPrompt string `protobuf:"bytes,2,opt,name=initial_prompt,json=initialPrompt,proto3" json:"initial_prompt,omitempty"`
}

func (x *NewSessionRequest) Reset() {
	*x = NewSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSessionRequest) ProtoMessage() {}

func (x *NewSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSessionRequest.ProtoReflect.Descriptor instead.
func (*NewSessionRequest) Descriptor() ([]byte, []int) {
	return file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDescGZIP(), []int{0}
}

func (x *NewSessionRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *NewSessionRequest) GetInitialPrompt() string {
	if x != nil {
		return x.InitialPrompt
	}
	return ""
}

type NewSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session_id is used to identify a conversation with a ChatGPT.
	SessionId       string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	InitialResponse string `protobuf:"bytes,2,opt,name=initial_response,json=initialResponse,proto3" json:"initial_response,omitempty"`
}

func (x *NewSessionResponse) Reset() {
	*x = NewSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSessionResponse) ProtoMessage() {}

func (x *NewSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSessionResponse.ProtoReflect.Descriptor instead.
func (*NewSessionResponse) Descriptor() ([]byte, []int) {
	return file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDescGZIP(), []int{1}
}

func (x *NewSessionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *NewSessionResponse) GetInitialResponse() string {
	if x != nil {
		return x.InitialResponse
	}
	return ""
}

type DeleteSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session_id is used to identify a conversation with a ChatGPT.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *DeleteSessionRequest) Reset() {
	*x = DeleteSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionRequest) ProtoMessage() {}

func (x *DeleteSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSessionRequest) Descriptor() ([]byte, []int) {
	return file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type DeleteSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session_id is used to identify a conversation with a ChatGPT.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *DeleteSessionResponse) Reset() {
	*x = DeleteSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionResponse) ProtoMessage() {}

func (x *DeleteSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSessionResponse) Descriptor() ([]byte, []int) {
	return file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteSessionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type ChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session_id is used to identify a conversation with a ChatGPT.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// prompt is the user's input.
	Prompt string `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`
}

func (x *ChatRequest) Reset() {
	*x = ChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRequest) ProtoMessage() {}

func (x *ChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRequest.ProtoReflect.Descriptor instead.
func (*ChatRequest) Descriptor() ([]byte, []int) {
	return file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDescGZIP(), []int{4}
}

func (x *ChatRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChatRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

type ChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// response is the ChatGPT's response.
	Response string `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ChatResponse) Reset() {
	*x = ChatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatResponse) ProtoMessage() {}

func (x *ChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatResponse.ProtoReflect.Descriptor instead.
func (*ChatResponse) Descriptor() ([]byte, []int) {
	return file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDescGZIP(), []int{5}
}

func (x *ChatResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

var File_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto protoreflect.FileDescriptor

var file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDesc = []byte{
	0x0a, 0x39, 0x6d, 0x75, 0x76, 0x74, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x62,
	0x6f, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x67, 0x70, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x62,
	0x6f, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x67, 0x70, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x6d, 0x75, 0x76,
	0x74, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x67, 0x70, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x22, 0x5d, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x22,
	0x5e, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x35, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x44,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x22, 0x2a, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x85, 0x03, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x47, 0x50, 0x54, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x7d, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x2e, 0x6d, 0x75, 0x76, 0x74, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x62, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x67, 0x70, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x75, 0x76, 0x74,
	0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x67, 0x70, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6b, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x30, 0x2e, 0x6d, 0x75, 0x76,
	0x74, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x67, 0x70, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d,
	0x75, 0x76, 0x74, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x67, 0x70, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x86, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x2e, 0x6d, 0x75, 0x76, 0x74, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x62, 0x6f, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x67, 0x70, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d,
	0x75, 0x76, 0x74, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x67, 0x70, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xb3, 0x02, 0x0a, 0x27, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x75, 0x76, 0x74, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f,
	0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x67, 0x70, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x43, 0x68, 0x61, 0x74, 0x67, 0x70, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x62, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x6d, 0x75, 0x76,
	0x74, 0x75, 0x62, 0x65, 0x72, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x6d, 0x75, 0x76, 0x74, 0x75, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74,
	0x2f, 0x63, 0x68, 0x61, 0x74, 0x67, 0x70, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74,
	0x2f, 0x76, 0x31, 0x3b, 0x63, 0x68, 0x61, 0x74, 0x67, 0x70, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x62, 0x6f, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4d, 0x43, 0x43, 0xaa, 0x02, 0x22, 0x4d, 0x75,
	0x76, 0x74, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x67, 0x70, 0x74, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x22, 0x4d, 0x75, 0x76, 0x74, 0x75, 0x62, 0x65, 0x72, 0x5c, 0x43, 0x68, 0x61, 0x74,
	0x62, 0x6f, 0x74, 0x5c, 0x43, 0x68, 0x61, 0x74, 0x67, 0x70, 0x74, 0x43, 0x68, 0x61, 0x74, 0x62,
	0x6f, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x2e, 0x4d, 0x75, 0x76, 0x74, 0x75, 0x62, 0x65, 0x72,
	0x5c, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x5c, 0x43, 0x68, 0x61, 0x74, 0x67, 0x70, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x25, 0x4d, 0x75, 0x76, 0x74, 0x75, 0x62, 0x65,
	0x72, 0x3a, 0x3a, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x3a, 0x3a, 0x43, 0x68, 0x61, 0x74,
	0x67, 0x70, 0x74, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDescOnce sync.Once
	file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDescData = file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDesc
)

func file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDescGZIP() []byte {
	file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDescOnce.Do(func() {
		file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDescData = protoimpl.X.CompressGZIP(file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDescData)
	})
	return file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDescData
}

var file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_goTypes = []interface{}{
	(*NewSessionRequest)(nil),     // 0: muvtuber.chatbot.chatgpt_chatbot.v1.NewSessionRequest
	(*NewSessionResponse)(nil),    // 1: muvtuber.chatbot.chatgpt_chatbot.v1.NewSessionResponse
	(*DeleteSessionRequest)(nil),  // 2: muvtuber.chatbot.chatgpt_chatbot.v1.DeleteSessionRequest
	(*DeleteSessionResponse)(nil), // 3: muvtuber.chatbot.chatgpt_chatbot.v1.DeleteSessionResponse
	(*ChatRequest)(nil),           // 4: muvtuber.chatbot.chatgpt_chatbot.v1.ChatRequest
	(*ChatResponse)(nil),          // 5: muvtuber.chatbot.chatgpt_chatbot.v1.ChatResponse
}
var file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_depIdxs = []int32{
	0, // 0: muvtuber.chatbot.chatgpt_chatbot.v1.ChatGPTService.NewSession:input_type -> muvtuber.chatbot.chatgpt_chatbot.v1.NewSessionRequest
	4, // 1: muvtuber.chatbot.chatgpt_chatbot.v1.ChatGPTService.Chat:input_type -> muvtuber.chatbot.chatgpt_chatbot.v1.ChatRequest
	2, // 2: muvtuber.chatbot.chatgpt_chatbot.v1.ChatGPTService.DeleteSession:input_type -> muvtuber.chatbot.chatgpt_chatbot.v1.DeleteSessionRequest
	1, // 3: muvtuber.chatbot.chatgpt_chatbot.v1.ChatGPTService.NewSession:output_type -> muvtuber.chatbot.chatgpt_chatbot.v1.NewSessionResponse
	5, // 4: muvtuber.chatbot.chatgpt_chatbot.v1.ChatGPTService.Chat:output_type -> muvtuber.chatbot.chatgpt_chatbot.v1.ChatResponse
	3, // 5: muvtuber.chatbot.chatgpt_chatbot.v1.ChatGPTService.DeleteSession:output_type -> muvtuber.chatbot.chatgpt_chatbot.v1.DeleteSessionResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_init() }
func file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_init() {
	if File_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_goTypes,
		DependencyIndexes: file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_depIdxs,
		MessageInfos:      file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_msgTypes,
	}.Build()
	File_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto = out.File
	file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_rawDesc = nil
	file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_goTypes = nil
	file_muvtuber_chatbot_chatgpt_chatbot_v1_chatgpt_chatbot_proto_depIdxs = nil
}
