// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: muvtuber/chatbot/chatgpt_chatbot/v1/chatgpt_chatbot.proto

package chatgpt_chatbotv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatGPTServiceClient is the client API for ChatGPTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatGPTServiceClient interface {
	// NewSession creates a new session with ChatGPT.
	// Input: access_token (string) and initial_prompt (string).
	// Output: session_id (string).
	NewSession(ctx context.Context, in *NewSessionRequest, opts ...grpc.CallOption) (*NewSessionResponse, error)
	// Chat sends a prompt to ChatGPT and receives a response.
	// Input: session_id (string) and prompt (string).
	// Output: response (string).
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	// DeleteSession deletes a session with ChatGPT.
	// Input: session_id (string).
	// Output: session_id (string).
	DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*DeleteSessionResponse, error)
}

type chatGPTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatGPTServiceClient(cc grpc.ClientConnInterface) ChatGPTServiceClient {
	return &chatGPTServiceClient{cc}
}

func (c *chatGPTServiceClient) NewSession(ctx context.Context, in *NewSessionRequest, opts ...grpc.CallOption) (*NewSessionResponse, error) {
	out := new(NewSessionResponse)
	err := c.cc.Invoke(ctx, "/muvtuber.chatbot.chatgpt_chatbot.v1.ChatGPTService/NewSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGPTServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, "/muvtuber.chatbot.chatgpt_chatbot.v1.ChatGPTService/Chat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGPTServiceClient) DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*DeleteSessionResponse, error) {
	out := new(DeleteSessionResponse)
	err := c.cc.Invoke(ctx, "/muvtuber.chatbot.chatgpt_chatbot.v1.ChatGPTService/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatGPTServiceServer is the server API for ChatGPTService service.
// All implementations must embed UnimplementedChatGPTServiceServer
// for forward compatibility
type ChatGPTServiceServer interface {
	// NewSession creates a new session with ChatGPT.
	// Input: access_token (string) and initial_prompt (string).
	// Output: session_id (string).
	NewSession(context.Context, *NewSessionRequest) (*NewSessionResponse, error)
	// Chat sends a prompt to ChatGPT and receives a response.
	// Input: session_id (string) and prompt (string).
	// Output: response (string).
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
	// DeleteSession deletes a session with ChatGPT.
	// Input: session_id (string).
	// Output: session_id (string).
	DeleteSession(context.Context, *DeleteSessionRequest) (*DeleteSessionResponse, error)
	mustEmbedUnimplementedChatGPTServiceServer()
}

// UnimplementedChatGPTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatGPTServiceServer struct {
}

func (UnimplementedChatGPTServiceServer) NewSession(context.Context, *NewSessionRequest) (*NewSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSession not implemented")
}
func (UnimplementedChatGPTServiceServer) Chat(context.Context, *ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedChatGPTServiceServer) DeleteSession(context.Context, *DeleteSessionRequest) (*DeleteSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedChatGPTServiceServer) mustEmbedUnimplementedChatGPTServiceServer() {}

// UnsafeChatGPTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatGPTServiceServer will
// result in compilation errors.
type UnsafeChatGPTServiceServer interface {
	mustEmbedUnimplementedChatGPTServiceServer()
}

func RegisterChatGPTServiceServer(s grpc.ServiceRegistrar, srv ChatGPTServiceServer) {
	s.RegisterService(&ChatGPTService_ServiceDesc, srv)
}

func _ChatGPTService_NewSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGPTServiceServer).NewSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/muvtuber.chatbot.chatgpt_chatbot.v1.ChatGPTService/NewSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGPTServiceServer).NewSession(ctx, req.(*NewSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGPTService_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGPTServiceServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/muvtuber.chatbot.chatgpt_chatbot.v1.ChatGPTService/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGPTServiceServer).Chat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGPTService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGPTServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/muvtuber.chatbot.chatgpt_chatbot.v1.ChatGPTService/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGPTServiceServer).DeleteSession(ctx, req.(*DeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatGPTService_ServiceDesc is the grpc.ServiceDesc for ChatGPTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatGPTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "muvtuber.chatbot.chatgpt_chatbot.v1.ChatGPTService",
	HandlerType: (*ChatGPTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewSession",
			Handler:    _ChatGPTService_NewSession_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _ChatGPTService_Chat_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _ChatGPTService_DeleteSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "muvtuber/chatbot/chatgpt_chatbot/v1/chatgpt_chatbot.proto",
}
